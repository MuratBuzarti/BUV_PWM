

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Aug 01 15:05:25 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	10F322
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 29/04/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC10F322 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0020                     	;# 
    86  0020                     	;# 
    87  0021                     	;# 
    88  0022                     	;# 
    89  0022                     	;# 
    90  0023                     	;# 
    91  0024                     	;# 
    92  0025                     	;# 
    93  0026                     	;# 
    94  0027                     	;# 
    95  0027                     	;# 
    96  0028                     	;# 
    97  0029                     	;# 
    98  002A                     	;# 
    99  002A                     	;# 
   100  002B                     	;# 
   101  002C                     	;# 
   102  002D                     	;# 
   103  002E                     	;# 
   104  0030                     	;# 
   105  0031                     	;# 
   106  0032                     	;# 
   107  0033                     	;# 
   108  0034                     	;# 
   109  0035                     	;# 
   110  0036                     	;# 
   111  0037                     	;# 
   112  0038                     	;# 
   113  0039                     	;# 
   114  003A                     	;# 
   115  003B                     	;# 
   116  003C                     	;# 
   117  003D                     	;# 
   118  003E                     	;# 
   119  003F                     	;# 
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0020                     	;# 
   155  0020                     	;# 
   156  0021                     	;# 
   157  0022                     	;# 
   158  0022                     	;# 
   159  0023                     	;# 
   160  0024                     	;# 
   161  0025                     	;# 
   162  0026                     	;# 
   163  0027                     	;# 
   164  0027                     	;# 
   165  0028                     	;# 
   166  0029                     	;# 
   167  002A                     	;# 
   168  002A                     	;# 
   169  002B                     	;# 
   170  002C                     	;# 
   171  002D                     	;# 
   172  002E                     	;# 
   173  0030                     	;# 
   174  0031                     	;# 
   175  0032                     	;# 
   176  0033                     	;# 
   177  0034                     	;# 
   178  0035                     	;# 
   179  0036                     	;# 
   180  0037                     	;# 
   181  0038                     	;# 
   182  0039                     	;# 
   183  003A                     	;# 
   184  003B                     	;# 
   185  003C                     	;# 
   186  003D                     	;# 
   187  003E                     	;# 
   188  003F                     	;# 
   189                           
   190                           	psect	idataBANK0
   191  00BD                     __pidataBANK0:
   192                           
   193                           ;initializer for _PWM_period
   194  00BD  3419               	retlw	25
   195  0013                     _T2CON	set	19
   196  0012                     _PR2	set	18
   197  0009                     _WPUA	set	9
   198  0008                     _ANSELA	set	8
   199  0006                     _TRISA	set	6
   200  0005                     _PORTA	set	5
   201  0010                     _OSCCON	set	16
   202  0069                     _TMR2IE	set	105
   203  005E                     _PEIE	set	94
   204  0061                     _TMR2IF	set	97
   205  002A                     _RA2	set	42
   206  0028                     _RA0	set	40
   207  0029                     _RA1	set	41
   208  002B                     _RA3	set	43
   209  005F                     _GIE	set	95
   210                           
   211                           	psect	cinit
   212  000D                     start_initialization:	
   213                           ; #config settings
   214                           
   215  000D                     __initialization:
   216                           
   217                           ; Initialize objects allocated to BANK0
   218  000D  20BD               	fcall	__pidataBANK0	;fetch initializer
   219  000E  00CD               	movwf	__pdataBANK0& (0+127)
   220                           
   221                           ; Clear objects allocated to BANK0
   222  000F  01C0               	clrf	__pbssBANK0& (0+127)
   223  0010  01C1               	clrf	(__pbssBANK0+1)& (0+127)
   224  0011  01C2               	clrf	(__pbssBANK0+2)& (0+127)
   225  0012  01C3               	clrf	(__pbssBANK0+3)& (0+127)
   226  0013  01C4               	clrf	(__pbssBANK0+4)& (0+127)
   227  0014  01C5               	clrf	(__pbssBANK0+5)& (0+127)
   228  0015  01C6               	clrf	(__pbssBANK0+6)& (0+127)
   229  0016                     end_of_initialization:	
   230                           ;End of C runtime variable initialization code
   231                           
   232  0016                     __end_of__initialization:
   233  0016  0183               	clrf	3
   234  0017  2818               	ljmp	_main	;jump to C main() function
   235                           
   236                           	psect	bssBANK0
   237  0040                     __pbssBANK0:
   238  0040                     _NoCommandCounter:
   239  0040                     	ds	2
   240  0042                     _time_counter:
   241  0042                     	ds	2
   242  0044                     _PWM_set:
   243  0044                     	ds	1
   244  0045                     _PWM_counter:
   245  0045                     	ds	1
   246  0046                     _PWM_high:
   247  0046                     	ds	1
   248                           
   249                           	psect	dataBANK0
   250  004D                     __pdataBANK0:
   251  004D                     _PWM_period:
   252  004D                     	ds	1
   253                           
   254                           	psect	cstackCOMMON
   255  0000                     __pcstackCOMMON:
   256  0000                     ??_init:
   257                           
   258                           	psect	cstackBANK0
   259  0047                     __pcstackBANK0:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0047                     ?_init:
   263  0047                     ?_main:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0047                     ?_tmr2Int:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0047                     ??_tmr2Int:	
   270                           ; 1 bytes @ 0x0
   271                           
   272                           
   273                           ; 1 bytes @ 0x0
   274  0047                     	ds	3
   275  004A                     ??_main:
   276                           
   277                           ; 1 bytes @ 0x3
   278  004A                     	ds	3
   279                           
   280                           	psect	maintext
   281  0018                     __pmaintext:	
   282 ;;
   283 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   284 ;;
   285 ;; *************** function _main *****************
   286 ;; Defined at:
   287 ;;		line 28 in file "main.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;		None
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : B00/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMMON   BANK0
   301 ;;      Params:         0       0
   302 ;;      Locals:         0       0
   303 ;;      Temps:          0       3
   304 ;;      Totals:         0       3
   305 ;;Total ram usage:        3 bytes
   306 ;; Hardware stack levels required when called:    2
   307 ;; This function calls:
   308 ;;		_init
   309 ;; This function is called by:
   310 ;;		Startup code after reset
   311 ;; This function uses a non-reentrant model
   312 ;;
   313                           
   314                           
   315                           ;psect for function _main
   316  0018                     _main:
   317  0018                     l675:	
   318                           ;incstack = 0
   319                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   320                           
   321                           
   322                           ;main.c: 30:     init();
   323  0018  20AF               	fcall	_init
   324  0019                     l677:
   325                           
   326                           ;main.c: 31:     GIE = 1;
   327  0019  178B               	bsf	11,7	;volatile
   328  001A                     l679:
   329                           
   330                           ;main.c: 34:     {;main.c: 46:         _delay((unsigned long)((500)*(8000000/4000000.0))
      +                          );
   331  001A  30C7               	movlw	199
   332  001B  00CA               	movwf	??_main
   333  001C                     u237:
   334  001C  281D               	nop2
   335  001D  0BCA               	decfsz	??_main,f
   336  001E  281C               	goto	u237
   337  001F  2820               	nop2
   338  0020  2821               	nop2
   339                           
   340                           ;main.c: 48:         while(PWM_high<PWM_set)
   341  0021  2833               	goto	l685
   342  0022                     l681:
   343                           
   344                           ;main.c: 49:         {;main.c: 50:             _delay((unsigned long)((1000)*(8000000/40
      +                          00.0)));
   345  0022  300B               	movlw	11
   346  0023  00CC               	movwf	??_main+2
   347  0024  3026               	movlw	38
   348  0025  00CB               	movwf	??_main+1
   349  0026  305D               	movlw	93
   350  0027  00CA               	movwf	??_main
   351  0028                     u247:
   352  0028  0BCA               	decfsz	??_main,f
   353  0029  2828               	goto	u247
   354  002A  0BCB               	decfsz	??_main+1,f
   355  002B  2828               	goto	u247
   356  002C  0BCC               	decfsz	??_main+2,f
   357  002D  2828               	goto	u247
   358  002E  282F               	nop2
   359  002F                     l683:
   360                           
   361                           ;main.c: 51:             PWM_high++;
   362  002F  3001               	movlw	1
   363  0030  00FF               	movwf	btemp+1
   364  0031  087F               	movf	btemp+1,w
   365  0032  07C6               	addwf	_PWM_high,f
   366  0033                     l685:
   367                           
   368                           ;main.c: 48:         while(PWM_high<PWM_set)
   369  0033  0844               	movf	_PWM_set,w
   370  0034  0246               	subwf	_PWM_high,w
   371  0035  1C03               	skipc
   372  0036  2838               	goto	u121
   373  0037  2839               	goto	u120
   374  0038                     u121:
   375  0038  2822               	goto	l681
   376  0039                     u120:
   377  0039  2849               	goto	l691
   378  003A                     l687:
   379                           
   380                           ;main.c: 55:         {;main.c: 56:             _delay((unsigned long)((1000)*(8000000/40
      +                          00.0)));
   381  003A  300B               	movlw	11
   382  003B  00CC               	movwf	??_main+2
   383  003C  3026               	movlw	38
   384  003D  00CB               	movwf	??_main+1
   385  003E  305D               	movlw	93
   386  003F  00CA               	movwf	??_main
   387  0040                     u257:
   388  0040  0BCA               	decfsz	??_main,f
   389  0041  2840               	goto	u257
   390  0042  0BCB               	decfsz	??_main+1,f
   391  0043  2840               	goto	u257
   392  0044  0BCC               	decfsz	??_main+2,f
   393  0045  2840               	goto	u257
   394  0046  2847               	nop2
   395  0047                     l689:
   396                           
   397                           ;main.c: 57:             PWM_high--;
   398  0047  3001               	movlw	1
   399  0048  02C6               	subwf	_PWM_high,f
   400  0049                     l691:
   401                           
   402                           ;main.c: 54:         while(PWM_high>PWM_set)
   403  0049  0846               	movf	_PWM_high,w
   404  004A  0244               	subwf	_PWM_set,w
   405  004B  1C03               	skipc
   406  004C  284E               	goto	u131
   407  004D  284F               	goto	u130
   408  004E                     u131:
   409  004E  283A               	goto	l687
   410  004F                     u130:
   411  004F                     l39:
   412                           
   413                           ;main.c: 61:         if (RA3 == 0) {
   414  004F  1985               	btfsc	5,3	;volatile
   415  0050  2852               	goto	u141
   416  0051  2853               	goto	u140
   417  0052                     u141:
   418  0052  2859               	goto	l697
   419  0053                     u140:
   420  0053                     l693:
   421                           
   422                           ;main.c: 62:             PWM_set = 12;
   423  0053  300C               	movlw	12
   424  0054  00FF               	movwf	btemp+1
   425  0055  087F               	movf	btemp+1,w
   426  0056  00C4               	movwf	_PWM_set
   427  0057                     l695:
   428                           
   429                           ;main.c: 63:             NoCommandCounter = 0;
   430  0057  01C0               	clrf	_NoCommandCounter
   431  0058  01C1               	clrf	_NoCommandCounter+1
   432  0059                     l697:
   433                           
   434                           ;main.c: 66:         if (RA1 == 0) {
   435  0059  1885               	btfsc	5,1	;volatile
   436  005A  285C               	goto	u151
   437  005B  285D               	goto	u150
   438  005C                     u151:
   439  005C  2863               	goto	l703
   440  005D                     u150:
   441  005D                     l699:
   442                           
   443                           ;main.c: 67:             PWM_set = 8;
   444  005D  3008               	movlw	8
   445  005E  00FF               	movwf	btemp+1
   446  005F  087F               	movf	btemp+1,w
   447  0060  00C4               	movwf	_PWM_set
   448  0061                     l701:
   449                           
   450                           ;main.c: 68:             NoCommandCounter = 0;
   451  0061  01C0               	clrf	_NoCommandCounter
   452  0062  01C1               	clrf	_NoCommandCounter+1
   453  0063                     l703:
   454                           
   455                           ;main.c: 71:         if (RA0 == 0) {
   456  0063  1805               	btfsc	5,0	;volatile
   457  0064  2866               	goto	u161
   458  0065  2867               	goto	u160
   459  0066                     u161:
   460  0066  286D               	goto	l709
   461  0067                     u160:
   462  0067                     l705:
   463                           
   464                           ;main.c: 72:             PWM_set = 3;
   465  0067  3003               	movlw	3
   466  0068  00FF               	movwf	btemp+1
   467  0069  087F               	movf	btemp+1,w
   468  006A  00C4               	movwf	_PWM_set
   469  006B                     l707:
   470                           
   471                           ;main.c: 73:             NoCommandCounter = 0;
   472  006B  01C0               	clrf	_NoCommandCounter
   473  006C  01C1               	clrf	_NoCommandCounter+1
   474  006D                     l709:
   475                           
   476                           ;main.c: 77:         if ((RA3==1)&&(RA1==1)&&(RA0==1))
   477  006D  1D85               	btfss	5,3	;volatile
   478  006E  2870               	goto	u171
   479  006F  2871               	goto	u170
   480  0070                     u171:
   481  0070  281A               	goto	l679
   482  0071                     u170:
   483  0071                     l711:
   484  0071  1C85               	btfss	5,1	;volatile
   485  0072  2874               	goto	u181
   486  0073  2875               	goto	u180
   487  0074                     u181:
   488  0074  281A               	goto	l679
   489  0075                     u180:
   490  0075                     l713:
   491  0075  1C05               	btfss	5,0	;volatile
   492  0076  2878               	goto	u191
   493  0077  2879               	goto	u190
   494  0078                     u191:
   495  0078  281A               	goto	l679
   496  0079                     u190:
   497  0079                     l715:
   498                           
   499                           ;main.c: 78:         {;main.c: 79:             NoCommandCounter++;
   500  0079  3001               	movlw	1
   501  007A  07C0               	addwf	_NoCommandCounter,f
   502  007B  1803               	skipnc
   503  007C  0AC1               	incf	_NoCommandCounter+1,f
   504  007D  3000               	movlw	0
   505  007E  07C1               	addwf	_NoCommandCounter+1,f
   506                           
   507                           ;main.c: 80:             if (NoCommandCounter>=1000)
   508  007F  3003               	movlw	3
   509  0080  0241               	subwf	_NoCommandCounter+1,w
   510  0081  30E8               	movlw	232
   511  0082  1903               	skipnz
   512  0083  0240               	subwf	_NoCommandCounter,w
   513  0084  1C03               	skipc
   514  0085  2887               	goto	u201
   515  0086  2888               	goto	u200
   516  0087                     u201:
   517  0087  281A               	goto	l679
   518  0088                     u200:
   519  0088                     l717:
   520                           
   521                           ;main.c: 81:             {;main.c: 82:                 PWM_set = PWM_period;
   522  0088  084D               	movf	_PWM_period,w
   523  0089  00FF               	movwf	btemp+1
   524  008A  087F               	movf	btemp+1,w
   525  008B  00C4               	movwf	_PWM_set
   526  008C                     l719:
   527                           
   528                           ;main.c: 83:                 NoCommandCounter=1000;
   529  008C  30E8               	movlw	232
   530  008D  00C0               	movwf	_NoCommandCounter
   531  008E  3003               	movlw	3
   532  008F  00C1               	movwf	_NoCommandCounter+1
   533  0090  281A               	goto	l679
   534  0091  280C               	ljmp	start
   535  0092                     __end_of_main:
   536                           
   537                           	psect	text1
   538  00AF                     __ptext1:	
   539 ;; *************** function _init *****************
   540 ;; Defined at:
   541 ;;		line 13 in file "functions.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg, status,2
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMMON   BANK0
   555 ;;      Params:         0       0
   556 ;;      Locals:         0       0
   557 ;;      Temps:          0       0
   558 ;;      Totals:         0       0
   559 ;;Total ram usage:        0 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; Hardware stack levels required when called:    1
   562 ;; This function calls:
   563 ;;		Nothing
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           
   570                           ;psect for function _init
   571  00AF                     _init:
   572  00AF                     l659:	
   573                           ;incstack = 0
   574                           ; Regs used in _init: [wreg+status,2]
   575                           
   576                           
   577                           ;functions.c: 16:     OSCCON=0b01100000;
   578  00AF  3060               	movlw	96
   579  00B0  0090               	movwf	16	;volatile
   580  00B1                     l661:
   581                           
   582                           ;functions.c: 19:     PORTA=0;
   583  00B1  0185               	clrf	5	;volatile
   584  00B2                     l663:
   585                           
   586                           ;functions.c: 20:     TRISA=0b00001011;
   587  00B2  300B               	movlw	11
   588  00B3  0086               	movwf	6	;volatile
   589                           
   590                           ;functions.c: 21:     ANSELA=0;
   591  00B4  0188               	clrf	8	;volatile
   592                           
   593                           ;functions.c: 22:     WPUA=0;
   594  00B5  0189               	clrf	9	;volatile
   595  00B6                     l665:
   596                           
   597                           ;functions.c: 25:     PR2=50;
   598  00B6  3032               	movlw	50
   599  00B7  0092               	movwf	18	;volatile
   600  00B8                     l667:
   601                           
   602                           ;functions.c: 26:     T2CON=0b00000100;
   603  00B8  3004               	movlw	4
   604  00B9  0093               	movwf	19	;volatile
   605  00BA                     l669:
   606                           
   607                           ;functions.c: 29:     PEIE=1;
   608  00BA  170B               	bsf	11,6	;volatile
   609  00BB                     l671:
   610                           
   611                           ;functions.c: 30:     TMR2IE=1;
   612  00BB  148D               	bsf	13,1	;volatile
   613  00BC                     l75:
   614  00BC  0008               	return
   615  00BD                     __end_of_init:
   616                           
   617                           	psect	text2
   618  0092                     __ptext2:	
   619 ;; *************** function _tmr2Int *****************
   620 ;; Defined at:
   621 ;;		line 93 in file "main.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;		None
   624 ;; Auto vars:     Size  Location     Type
   625 ;;		None
   626 ;; Return value:  Size  Location     Type
   627 ;;                  1    wreg      void 
   628 ;; Registers used:
   629 ;;		wreg, status,2, status,0, btemp+1
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMMON   BANK0
   635 ;;      Params:         0       0
   636 ;;      Locals:         0       0
   637 ;;      Temps:          0       3
   638 ;;      Totals:         0       3
   639 ;;Total ram usage:        3 bytes
   640 ;; Hardware stack levels used:    1
   641 ;; This function calls:
   642 ;;		Nothing
   643 ;; This function is called by:
   644 ;;		Interrupt level 1
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           
   649                           ;psect for function _tmr2Int
   650  0092                     _tmr2Int:
   651  0092                     i1l721:
   652                           
   653                           ;main.c: 95:     PWM_counter++;
   654  0092  3001               	movlw	1
   655  0093  00FF               	movwf	btemp+1
   656  0094  087F               	movf	btemp+1,w
   657  0095  07C5               	addwf	_PWM_counter,f
   658  0096                     i1l723:
   659                           
   660                           ;main.c: 97:     if(PWM_counter>=PWM_period)
   661  0096  084D               	movf	_PWM_period,w
   662  0097  0245               	subwf	_PWM_counter,w
   663  0098  1C03               	skipc
   664  0099  289B               	goto	u21_21
   665  009A  289C               	goto	u21_20
   666  009B                     u21_21:
   667  009B  289E               	goto	i1l729
   668  009C                     u21_20:
   669  009C                     i1l725:
   670                           
   671                           ;main.c: 98:     {;main.c: 99:         RA2=1;
   672  009C  1505               	bsf	5,2	;volatile
   673  009D                     i1l727:
   674                           
   675                           ;main.c: 100:         PWM_counter=0;
   676  009D  01C5               	clrf	_PWM_counter
   677  009E                     i1l729:
   678                           
   679                           ;main.c: 103:     if(PWM_counter>=PWM_high)
   680  009E  0846               	movf	_PWM_high,w
   681  009F  0245               	subwf	_PWM_counter,w
   682  00A0  1C03               	skipc
   683  00A1  28A3               	goto	u22_21
   684  00A2  28A4               	goto	u22_20
   685  00A3                     u22_21:
   686  00A3  28A5               	goto	i1l53
   687  00A4                     u22_20:
   688  00A4                     i1l731:
   689                           
   690                           ;main.c: 104:     {;main.c: 105:         RA2=0;
   691  00A4  1105               	bcf	5,2	;volatile
   692  00A5                     i1l53:	
   693                           ;main.c: 106:     }
   694                           
   695                           
   696                           ;main.c: 108:     TMR2IF=0;
   697  00A5  108C               	bcf	12,1	;volatile
   698  00A6                     i1l54:	
   699                           ;main.c: 109:     return;
   700                           
   701  00A6  0849               	movf	??_tmr2Int+2,w
   702  00A7  00FF               	movwf	btemp+1
   703  00A8  0848               	movf	??_tmr2Int+1,w
   704  00A9  008A               	movwf	10
   705  00AA  0E47               	swapf	??_tmr2Int^0,w
   706  00AB  0083               	movwf	3
   707  00AC  0EFE               	swapf	btemp,f
   708  00AD  0E7E               	swapf	btemp,w
   709  00AE  0009               	retfie
   710  00AF                     __end_of_tmr2Int:
   711  007E                     btemp	set	126	;btemp
   712  007E                     wtemp0	set	126
   713                           
   714                           	psect	intentry
   715  0004                     __pintentry:	
   716                           ;incstack = 0
   717                           ; Regs used in _tmr2Int: [wreg+status,2+status,0+btemp+1]
   718                           
   719  0004                     interrupt_function:
   720  007E                     saved_w	set	btemp
   721  0004  00FE               	movwf	btemp
   722  0005  0E03               	swapf	3,w
   723  0006  00C7               	movwf	??_tmr2Int
   724  0007  080A               	movf	10,w
   725  0008  00C8               	movwf	??_tmr2Int+1
   726  0009  087F               	movf	btemp+1,w
   727  000A  00C9               	movwf	??_tmr2Int+2
   728  000B  2892               	ljmp	_tmr2Int
   729                           
   730                           	psect	config
   731                           
   732                           ;Config register CONFIG @ 0x2007
   733                           ;	Oscillator Selection bits
   734                           ;	FOSC = INTOSC, INTOSC oscillator: CLKIN function disabled
   735                           ;	Brown-out Reset Enable
   736                           ;	BOREN = ON, Brown-out Reset enabled
   737                           ;	Watchdog Timer Enable
   738                           ;	WDTE = OFF, WDT disabled
   739                           ;	Power-up Timer Enable bit
   740                           ;	PWRTE = ON, PWRT enabled
   741                           ;	MCLR Pin Function Select bit
   742                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
   743                           ;	Code Protection bit
   744                           ;	CP = ON, Program memory code protection is enabled
   745                           ;	Low-Voltage Programming Enable
   746                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
   747                           ;	Brown-out Reset Selection bits
   748                           ;	LPBOR = ON, BOR enabled
   749                           ;	Brown-out Reset Voltage Selection
   750                           ;	BORV = HI, Brown-out Reset Voltage (Vbor), high trip point selected.
   751                           ;	Flash Memory Self-Write Protection
   752                           ;	WRT = ALL, 000h to 1FFh write protected, no addresses may be modified by PMCON control
   753  2007                     	org	8199
   754  2007  2206               	dw	8710

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      6      14

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _tmr2Int in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _tmr2Int in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              3 BANK0      3     3      0
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _tmr2Int                                              3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init

 _tmr2Int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK0               3E      6       E       3       22.6%
BITBANK0            3E      0       0       6        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       E       5        0.0%
ABS                  0      0       E       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Aug 01 15:05:25 2021

                     l39 004F                       l75 00BC                      l701 0061  
                    l711 0071                      l703 0063                      l713 0075  
                    l705 0067                      l715 0079                      l707 006B  
                    l661 00B1                      l717 0088                      l709 006D  
                    l671 00BB                      l663 00B2                      l719 008C  
                    l665 00B6                      l681 0022                      l667 00B8  
                    l659 00AF                      l691 0049                      l683 002F  
                    l675 0018                      l669 00BA                      l693 0053  
                    l685 0033                      l677 0019                      l695 0057  
                    l687 003A                      l679 001A                      l697 0059  
                    l689 0047                      l699 005D                      _GIE 005F  
                    _RA0 0028                      _RA1 0029                      _RA2 002A  
                    _RA3 002B                      u200 0088                      u120 0039  
                    u201 0087                      u121 0038                      u130 004F  
                    u131 004E                      u140 0053                      u141 0052  
                    u150 005D                      u151 005C                      u160 0067  
                    u161 0066                      u170 0071                      u171 0070  
                    u180 0075                      u181 0074                      u237 001C  
                    u190 0079                      _PR2 0012                      u191 0078  
                    u247 0028                      u257 0040               _PWM_period 004D  
                   _PEIE 005E                     i1l53 00A5                     i1l54 00A6  
       _NoCommandCounter 0040                     _WPUA 0009                     _main 0018  
                   _init 00AF                     btemp 007E              _PWM_counter 0045  
                   start 000C                    ?_main 0047                    ?_init 0047  
                  _T2CON 0013                    i1l721 0092                    i1l731 00A4  
                  i1l723 0096                    i1l725 009C                    i1l727 009D  
                  i1l729 009E                    u21_20 009C                    u21_21 009B  
                  u22_20 00A4                    u22_21 00A3                    _PORTA 0005  
                  _TRISA 0006          __end_of_tmr2Int 00AF                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 000D  
           __end_of_main 0092             __end_of_init 00BD                   ??_main 004A  
                 ??_init 0000                   _ANSELA 0008                   _OSCCON 0010  
                 _TMR2IE 0069                   _TMR2IF 0061                ??_tmr2Int 0047  
                 saved_w 007E  __end_of__initialization 0016           __pcstackCOMMON 0000  
           __pidataBANK0 00BD               __pbssBANK0 0040               __pmaintext 0018  
             __pintentry 0004                  _PWM_set 0044                  __ptext1 00AF  
                __ptext2 0092                  _tmr2Int 0092     end_of_initialization 0016  
    start_initialization 000D              __pdataBANK0 004D                ___latbits 0000  
          __pcstackBANK0 0047                 ?_tmr2Int 0047        interrupt_function 0004  
               _PWM_high 0046         __size_of_tmr2Int 001D            __size_of_main 007A  
          __size_of_init 000E             _time_counter 0042                 intlevel1 0000  
